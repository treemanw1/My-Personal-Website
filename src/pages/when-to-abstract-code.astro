---
import EssayLayout from "../layouts/EssayLayout.astro";
---
<EssayLayout title="When Should You Abstract Code?" date="19 September 2024">
	<h1 class="text-2xl">Premature Abstraction: Rule Of Three</h1>
	<p class="italic">
		Abstraction: Moving repeated code into a function, method, or class
		that can be reused across a codebase.
	</p>
	<p>
		As a newbie writing software (often from scratch), I often find myself drawn toward
		abstracting code the moment the opportunity presents itself. However, I realize that the
		costs of premature abstraction (extra overhead following code trails into a new function)
		outweigh the little benefit (lesser lines of code).
	</p>
	<p>
		I've found that a helpful general heuristic to avoid this problem is the rule of three:
	</p>
	<p class="italic">
		&nbsp&nbspIf a piece of code is copied more than twice, it needs to be abstracted out.
	</p>
	<h1 class="text-2xl mt-3">When To Abstract: A Deeper Dive</h1>
	<p class="italic">
		Distilled insights gathered from <a class="bold" href="https://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to?source=post_page-----56b0d9de2c43--------------------------------">
		"Write code that is easy to delete, not easy to extend".</a>
	</p>
	<p>
		1. The price of abstraction is flexibility. Thus it follows that you should
		only abstract under some assumption of stability, ie if the code is 
		unlikely to change.
	</p>
	<p>
		If it's not obvious why abstractions are difficult to delete (it wasn't to me), the reason is
		because abstractions introduce dependencies. The ramifications of deleting boilerplate
		or copy-pasted code are self-contained. The effects of deleting abstractions are
		constrastingly less visible/can lead to unintended consequences.
	</p>
	<p>
		2. The collary of point 1 is that we should refrain from abstracting code that is
		likely to change.
	</p>
	<p>
		3. In abstractions, extensibility and ease-of-use are at odds with each other.
	</p>
	<div class="mb-[10vh]"/>
</EssayLayout>
